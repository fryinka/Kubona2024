// <auto-generated />
using System;
using Kubona.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Kubona.Migrations
{
    [DbContext(typeof(BuyAWatchContext))]
    [Migration("20210909100649_colorId2 foreign key")]
    partial class colorId2foreignkey
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Kubona.Data.Models.BagEventShop", b =>
                {
                    b.Property<int>("EventShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eventShopId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("City")
                        .HasColumnType("int");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAdded");

                    b.Property<int?>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("eventId");

                    b.Property<int?>("Sex")
                        .HasColumnType("int");

                    b.Property<int?>("TimeOfDay")
                        .HasColumnType("int");

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("verificationCode");

                    b.HasKey("EventShopId");

                    b.ToTable("BAG_EventShop");
                });

            modelBuilder.Entity("Kubona.Data.Models.BagRequestForm", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAdded");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("EstimatedGuest")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("RequestId");

                    b.ToTable("BAG_RequestForm");
                });

            modelBuilder.Entity("Kubona.Data.Models.BgPhotoBlog", b =>
                {
                    b.Property<int>("PhotoBlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("addedBy");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("addedDate");

                    b.Property<string>("CoverImageUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("coverImageUrl");

                    b.Property<string>("Summary")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("summary");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.HasKey("PhotoBlogId");

                    b.ToTable("BG_PhotoBlog");
                });

            modelBuilder.Entity("Kubona.Data.Models.BgPhotoBlogItem", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAdded");

                    b.Property<string>("Imagetitle")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Imageurl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("imageurl");

                    b.Property<int?>("PhotoBlogId")
                        .HasColumnType("int");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.HasKey("ImageId");

                    b.HasIndex("PhotoBlogId");

                    b.ToTable("BG_PhotoBlog_Items");
                });

            modelBuilder.Entity("Kubona.Data.Models.BigCommerceCheckDatum", b =>
                {
                    b.Property<int>("ShopSku")
                        .HasColumnType("int")
                        .HasColumnName("ShopSKU");

                    b.Property<string>("Category")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("Googleid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("googleid")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("ProductUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Trackingid")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("trackingid");

                    b.HasKey("ShopSku")
                        .HasName("PK__BigComme__5D583E8839788055");

                    b.ToTable("BigCommerceCheckData");
                });

            modelBuilder.Entity("Kubona.Data.Models.BigCommerceMigration", b =>
                {
                    b.Property<string>("Body")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ColorTag")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<int?>("Counter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("counter")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Image1Src")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("image1Src");

                    b.Property<string>("Image2Src")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("image2Src");

                    b.Property<string>("Image3Src")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("image3Src");

                    b.Property<string>("Image4Src")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("image4Src");

                    b.Property<string>("Image5Src")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("image5Src");

                    b.Property<string>("Image6Src")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("image6Src");

                    b.Property<string>("Image7Src")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("image7Src");

                    b.Property<string>("Image8Src")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("image8Src");

                    b.Property<int?>("ImagePosition")
                        .HasColumnType("int");

                    b.Property<string>("ImageSrc")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal?>("Internetprice")
                        .HasColumnType("money")
                        .HasColumnName("internetprice");

                    b.Property<int?>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("materialId")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("MaterialTag")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("materialTag");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SizeDesc")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<decimal?>("Storeprice")
                        .HasColumnType("money")
                        .HasColumnName("storeprice");

                    b.Property<string>("StyleTag")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("Title")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("TrackingId")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("VQuantity")
                        .HasColumnType("int")
                        .HasColumnName("vQuantity");

                    b.Property<string>("VTrackingid")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("vTrackingid");

                    b.ToTable("_BigCommerceMigration");
                });

            modelBuilder.Entity("Kubona.Data.Models.BwBrand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandAlphabetCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("brandAlphabetCode")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BrandName")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("CoverImageUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("coverImageUrl");

                    b.Property<bool?>("Isfeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isfeatured")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("BrandId");

                    b.ToTable("BW_Brands");
                });

            modelBuilder.Entity("Kubona.Data.Models.BwColor", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorDesc")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("IconClass")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("ColorId");

                    b.ToTable("BW_Colors");
                });

            modelBuilder.Entity("Kubona.Data.Models.BwMaterial", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("MaterialName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("MaterialId");

                    b.ToTable("BW_Materials");
                });

            modelBuilder.Entity("Kubona.Data.Models.CrmContactsNew", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("contactId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CountryCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CustomerSince")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("firstName");

                    b.Property<string>("Gsm")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("GSM");

                    b.Property<bool?>("IsExistingCustomer")
                        .HasColumnType("bit")
                        .HasColumnName("isExistingCustomer");

                    b.Property<DateTime?>("LastContactDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Sex")
                        .HasColumnType("int");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("ContactId");

                    b.ToTable("CRM_ContactsNew");
                });

            modelBuilder.Entity("Kubona.Data.Models.CtNewsFeed", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppId")
                        .HasColumnType("int")
                        .HasColumnName("appId");

                    b.Property<int?>("ByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAdded");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("imageUrl");

                    b.Property<int?>("IsFeatured")
                        .HasColumnType("int")
                        .HasColumnName("isFeatured");

                    b.Property<string>("MobileImageUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ReferenceUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("ReferenceURL");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.HasKey("NewsId");

                    b.ToTable("CT_NewsFeed");
                });

            modelBuilder.Entity("Kubona.Data.Models.PosDiscountUsageLog", b =>
                {
                    b.Property<int>("DiscountAppliedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountUsed")
                        .HasColumnType("money")
                        .HasColumnName("amountUsed");

                    b.Property<string>("CustomerGsm")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("customerGSM");

                    b.Property<DateTime>("DateUsed")
                        .HasColumnType("datetime")
                        .HasColumnName("dateUsed");

                    b.Property<bool?>("IsCancelled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isCancelled")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("RefId")
                        .HasColumnType("int")
                        .HasColumnName("refId");

                    b.HasKey("DiscountAppliedId");

                    b.ToTable("POS_Discount_UsageLog");
                });

            modelBuilder.Entity("Kubona.Data.Models.PriceCheckDatum", b =>
                {
                    b.Property<int>("ShopSku")
                        .HasColumnType("int")
                        .HasColumnName("ShopSKU");

                    b.Property<string>("Additionalimages")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("additionalimages");

                    b.Property<string>("Category")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("colorId")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("Googleid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("googleid")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("SizeDesc")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("sizeDesc");

                    b.Property<string>("ThemeDesc")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("themeDesc");

                    b.Property<int?>("ThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ThemeName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Trackingid")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("trackingid");

                    b.HasKey("ShopSku")
                        .HasName("PK__PriceChe__5D583E8807E124C1");

                    b.ToTable("PriceCheckData");
                });

            modelBuilder.Entity("Kubona.Data.Models.ShopifyMigration", b =>
                {
                    b.Property<string>("Body")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ColorTag")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<int?>("ImagePosition")
                        .HasColumnType("int");

                    b.Property<string>("ImageSrc")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal?>("Internetprice")
                        .HasColumnType("money")
                        .HasColumnName("internetprice");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SizeDesc")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<decimal?>("Storeprice")
                        .HasColumnType("money")
                        .HasColumnName("storeprice");

                    b.Property<string>("StyleTag")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("Title")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("TrackingId")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.ToTable("_ShopifyMigration");
                });

            modelBuilder.Entity("Kubona.Data.Models.TempDeactivateFix", b =>
                {
                    b.Property<int?>("NewItemGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("OldItemGroupId")
                        .HasColumnType("int");

                    b.ToTable("_Temp_Deactivate_Fix");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfAffiliate", b =>
                {
                    b.Property<int>("AffiliateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Gsm")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("GSM");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("ReferralId")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("AffiliateId");

                    b.ToTable("TF_Affiliates");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfAffiliateCommissionLog", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("AffiliateId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("AdId")
                        .HasColumnType("int");

                    b.Property<int?>("AdTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("AffiliateReferralId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Commission")
                        .HasColumnType("money");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAdded");

                    b.Property<int?>("ReceiptId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ReceiptTotal")
                        .HasColumnType("money");

                    b.HasKey("OrderId", "AffiliateId");

                    b.ToTable("TF_Affiliate_CommissionLog");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfAffiliateLink", b =>
                {
                    b.Property<int>("AdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("adId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("adName");

                    b.Property<string>("AffiliateId")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("affiliateId");

                    b.Property<string>("DestinationUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("destinationUrl");

                    b.Property<string>("GeneratedCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("generatedCode");

                    b.Property<int?>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("AdId");

                    b.ToTable("TF_AffiliateLink");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfAffiliateNew", b =>
                {
                    b.Property<string>("AffiliateId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gsm")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("GSM");

                    b.Property<bool?>("IsSync")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isSync")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isVerified")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TotalDiscount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Verificationcode")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("verificationcode");

                    b.HasKey("AffiliateId")
                        .HasName("PK__TF_Affil__0B4087CC0AD2A005");

                    b.ToTable("TF_AffiliateNew");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfAffiliateRefferal", b =>
                {
                    b.Property<int>("AffiliateRefferalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddId")
                        .HasColumnType("int");

                    b.Property<string>("AffiliateId")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("AnonymousId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateVisited")
                        .HasColumnType("datetime");

                    b.HasKey("AffiliateRefferalId");

                    b.ToTable("TF_AffiliateRefferal");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfAffiliatesDiscountCode", b =>
                {
                    b.Property<int>("AffiliateReferralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AffiliateId")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<string>("Fname")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("fname");

                    b.Property<string>("Gsm")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("gsm");

                    b.HasKey("AffiliateReferralId");

                    b.ToTable("TF_Affiliates_Discount_Codes");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfAffiliatesReference", b =>
                {
                    b.Property<int>("ReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("referenceId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("IsSent")
                        .HasColumnType("bit")
                        .HasColumnName("isSent");

                    b.Property<string>("SendToNumber")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("sendToNumber");

                    b.HasKey("ReferenceId");

                    b.ToTable("TF_Affiliates_Reference");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfBulkSmsTransactionMessage", b =>
                {
                    b.Property<int>("MsgId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("transactionId");

                    b.Property<bool?>("IsProcessed")
                        .HasColumnType("bit")
                        .HasColumnName("isProcessed");

                    b.HasKey("MsgId", "TransactionId");

                    b.ToTable("TF_BulkSMS_TransactionMessages");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfBulkSmslog", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("addedDate");

                    b.Property<string>("Message")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<int?>("MsgType")
                        .HasColumnType("int")
                        .HasColumnName("msgType");

                    b.Property<int?>("SentStatus")
                        .HasColumnType("int")
                        .HasColumnName("sentStatus");

                    b.Property<int?>("TotalCount")
                        .HasColumnType("int")
                        .HasColumnName("totalCount");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.ToTable("TF_BulkSMSLog");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfCardTransaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<int>("GateWayId")
                        .HasColumnType("int")
                        .HasColumnName("gateWayId");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IPAddress");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("ResponseCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ResponseDescription")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Tranxmsg")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("tranxmsg");

                    b.HasKey("TransactionId");

                    b.ToTable("TF_Card_Transactions");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfCheckinCheckoutLog", b =>
                {
                    b.Property<int>("CheckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("QtyModify")
                        .HasColumnType("int");

                    b.Property<int?>("RefId")
                        .HasColumnType("int");

                    b.Property<string>("TrackingId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("CheckId");

                    b.ToTable("TF_CheckinCheckout_Log");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfCollectionDeal", b =>
                {
                    b.Property<int>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddedById")
                        .HasColumnType("int")
                        .HasColumnName("addedById");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("addedDate");

                    b.Property<string>("BatchId")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("batchId");

                    b.Property<int>("CollectionId")
                        .HasColumnType("int")
                        .HasColumnName("collectionId");

                    b.Property<string>("DiscountTitle")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<int?>("DiscountTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FreeCollectionId2")
                        .HasColumnType("int")
                        .HasColumnName("freeCollectionId2");

                    b.Property<int?>("FreeQuantity")
                        .HasColumnType("int")
                        .HasColumnName("freeQuantity");

                    b.Property<int?>("FreecollectionId")
                        .HasColumnType("int")
                        .HasColumnName("freecollectionId");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("imageUrl");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<bool?>("Isfeatured")
                        .HasColumnType("bit")
                        .HasColumnName("isfeatured");

                    b.Property<int?>("LimitQty")
                        .HasColumnType("int")
                        .HasColumnName("limitQty");

                    b.Property<string>("LongDiscountTitle")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("longDiscountTitle");

                    b.Property<string>("MainImageUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal?>("PercentageOff")
                        .HasColumnType("money");

                    b.Property<decimal?>("PriceGreaterThan")
                        .HasColumnType("money");

                    b.Property<decimal?>("PriceLessThan")
                        .HasColumnType("money");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SyncCode")
                        .HasColumnType("int");

                    b.HasKey("SaleId");

                    b.ToTable("TF_Collection_Deals");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfDepartment", b =>
                {
                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("Codcode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CODCode")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("Depth")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Googleid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GOOGLEID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Imageurl")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("imageurl");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<bool?>("Isfeatured")
                        .HasColumnType("bit")
                        .HasColumnName("isfeatured");

                    b.Property<int?>("Level1Parent")
                        .HasColumnType("int");

                    b.Property<int>("Lft")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("Position")
                        .HasColumnType("int")
                        .HasColumnName("position");

                    b.Property<int>("Rgt")
                        .HasColumnType("int");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int?>("WhatsAppCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("DepartmentId")
                        .HasName("PK_TF_Category");

                    b.ToTable("TF_Department");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfDiscountCode", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("CodeValue")
                        .HasColumnType("money")
                        .HasColumnName("codeValue");

                    b.Property<string>("DiscountCode")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ForUserGsm")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("forUserGSM");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<bool?>("IsSent")
                        .HasColumnType("bit")
                        .HasColumnName("isSent");

                    b.Property<bool?>("IsSynced")
                        .HasColumnType("bit")
                        .HasColumnName("isSynced");

                    b.Property<int?>("NumUsed")
                        .HasColumnType("int")
                        .HasColumnName("numUsed");

                    b.Property<decimal?>("PercentOff")
                        .HasColumnType("money")
                        .HasColumnName("percentOff");

                    b.HasKey("DiscountId");

                    b.ToTable("TF_Discount_Codes");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfDiscountCodeDeActivateLog", b =>
                {
                    b.Property<string>("DiscountCode")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<string>("Ipaddress")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IPAddress");

                    b.HasKey("DiscountCode");

                    b.ToTable("TF_DiscountCode_DeActivateLog");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfExchangeRequest", b =>
                {
                    b.Property<int>("ExchangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("exchangeId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerGsm")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("CustomerGSM");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("datetime")
                        .HasColumnName("dateReceived");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnType("datetime")
                        .HasColumnName("dateRequested");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("invoiceNumber");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<int?>("PickupOption")
                        .HasColumnType("int")
                        .HasColumnName("pickupOption");

                    b.Property<int?>("ReasonForExchange")
                        .HasColumnType("int")
                        .HasColumnName("reasonForExchange");

                    b.Property<int?>("ReturnModeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("returnModeId")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("stateId");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("ExchangeId");

                    b.ToTable("TF_ExchangeRequest");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfFrontPageImageRotator", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAdded");

                    b.Property<string>("DestinationUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("DestinationURL");

                    b.Property<string>("ImageTitle")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("imageTitle");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<int?>("RotatorId")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("ThumbNailUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("thumbNailUrl");

                    b.HasKey("ImageId");

                    b.ToTable("TF_FrontPage_ImageRotator");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfFrontPageWidget", b =>
                {
                    b.Property<int>("WidgetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("brandId")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryPageSize")
                        .HasColumnType("int");

                    b.Property<int?>("CollectionId")
                        .HasColumnType("int");

                    b.Property<int?>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("colorId")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAdded");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("PageSize")
                        .HasColumnType("int");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WidgetId");

                    b.ToTable("TF_FrontPage_Widgets");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfInternalSmsLog", b =>
                {
                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAdded");

                    b.Property<string>("Gsm")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("GSM");

                    b.Property<string>("Message")
                        .HasMaxLength(160)
                        .IsUnicode(false)
                        .HasColumnType("varchar(160)");

                    b.Property<int?>("MsgType")
                        .HasColumnType("int");

                    b.ToTable("TF_InternalSMS_Log");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfInvoicesLog", b =>
                {
                    b.Property<int>("InvoicesLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("invoicesLogId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAdded");

                    b.Property<int?>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("departmentId")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Gsm")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("GSM");

                    b.Property<decimal>("InternetPrice")
                        .HasColumnType("money");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("invoiceId")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("InvoicesItemId")
                        .HasColumnType("int");

                    b.Property<int?>("Invoicestatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("invoicestatus")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Itemgroupid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("itemgroupid")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("locationId")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("SoldBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("title");

                    b.Property<string>("TrackingId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("InvoicesLogId")
                        .HasName("PK_TF_invoicesLog");

                    b.ToTable("TF_InvoicesLog");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfItemsGroup", b =>
                {
                    b.Property<int>("ItemGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("BazaarPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brandId");

                    b.Property<int?>("CollectionId")
                        .HasColumnType("int");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("colorId")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Details")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("details");

                    b.Property<DateTime?>("ExpiryDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("FrontPagePositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("frontPagePositionId")
                        .HasDefaultValueSql("((500))");

                    b.Property<string>("HighResolutionUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal?>("Internetprice")
                        .HasColumnType("money")
                        .HasColumnName("internetprice");

                    b.Property<bool?>("IsHot")
                        .HasColumnType("bit")
                        .HasColumnName("isHot");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<bool?>("Isfeatured")
                        .HasColumnType("bit")
                        .HasColumnName("isfeatured");

                    b.Property<decimal?>("Limitprice")
                        .HasColumnType("money")
                        .HasColumnName("limitprice");

                    b.Property<string>("Location")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("location");

                    b.Property<int?>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("materialId")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("MobileImageUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("NumAvailable")
                        .HasColumnType("int")
                        .HasColumnName("numAvailable");

                    b.Property<int?>("NumOfViews")
                        .HasColumnType("int");

                    b.Property<decimal?>("OfferPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasColumnName("offerPrice")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((500))");

                    b.Property<string>("Posref")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("posref");

                    b.Property<int?>("Producttype")
                        .HasColumnType("int")
                        .HasColumnName("producttype");

                    b.Property<string>("QualityCrit")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<string>("SearchTags")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("searchTags");

                    b.Property<string>("SimilarId")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("similarId");

                    b.Property<string>("SquareImageUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal?>("StartPrice")
                        .HasColumnType("money")
                        .HasColumnName("startPrice");

                    b.Property<decimal?>("Storeprice")
                        .HasColumnType("money")
                        .HasColumnName("storeprice");

                    b.Property<string>("Title")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("TrackingId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("trackingId");

                    b.Property<decimal?>("Vendorprice")
                        .HasColumnType("money")
                        .HasColumnName("vendorprice");

                    b.Property<string>("YouTubeId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ItemGroupId")
                        .HasName("PK_ItemGroup");

                    b.HasIndex("BrandId");

                    b.HasIndex("ColorId");

                    b.HasIndex(new[] { "ItemGroupId", "PositionId" }, "NCI_ItemgroupId_PositionId")
                        .IsUnique()
                        .HasFilter("[PositionId] IS NOT NULL");

                    b.HasIndex(new[] { "DepartmentId", "Isactive", "NumAvailable" }, "Tf_itemsgroup_BySearch");

                    b.HasIndex(new[] { "Isactive", "NumAvailable" }, "pk_itemsgroup_param");

                    b.HasIndex(new[] { "Isactive", "NumAvailable" }, "tf_items_group_isactive");

                    b.HasIndex(new[] { "Isactive", "ColorId", "NumAvailable" }, "tf_itemsgroup_getactive");

                    b.ToTable("TF_ItemsGroup");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfItemsImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedByIp")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("addedByIP");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("addedDate");

                    b.Property<string>("DesktopProductImageUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("desktopProductImageUrl");

                    b.Property<string>("MobileProductImageUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("mobileProductImageUrl");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("RecImageUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("SquareImageUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("ProductImageId")
                        .HasName("PK_TF_Items_Images");

                    b.ToTable("TF_ItemsImages");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfItemsSearchHistory", b =>
                {
                    b.Property<int>("SearchIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("SearchCriteria")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SearchIndex");

                    b.ToTable("TF_Items_SearchHistory");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfItemsVideo", b =>
                {
                    b.Property<string>("VideoId")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("AddedByIp")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("addedByIP");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("addedDate");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("VideoId");

                    b.ToTable("TF_ItemsVideos");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfItemsViewHistory", b =>
                {
                    b.Property<int>("ViewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("NumOfViews")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("ViewDate")
                        .HasColumnType("datetime");

                    b.HasKey("ViewId");

                    b.ToTable("TF_Items_ViewHistory");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfItemsViewHistory2", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("NumOfViews")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("ViewDate")
                        .HasColumnType("datetime");

                    b.ToTable("TF_Items_ViewHistory2");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfItemsWishlist", b =>
                {
                    b.Property<int>("WishListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WishListId")
                        .HasName("PK_TF_Items__Wishlist");

                    b.ToTable("TF_Items_Wishlist");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfItemsgroupDescriptionUpdatedLog", b =>
                {
                    b.Property<int>("ItemgroupId")
                        .HasColumnType("int");

                    b.Property<int>("ByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAdded");

                    b.HasKey("ItemgroupId");

                    b.ToTable("TF_Itemsgroup_DescriptionUpdated_Log");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfItemsgroupDiscountedPrice", b =>
                {
                    b.Property<int>("ItemGroupDiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ByUserId")
                        .HasColumnType("int")
                        .HasColumnName("byUserId");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("DiscountedPrice")
                        .HasColumnType("money");

                    b.Property<int?>("ItemGroupId")
                        .HasColumnType("int");

                    b.HasKey("ItemGroupDiscountId");

                    b.ToTable("TF_Itemsgroup_DiscountedPrices");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfItemsgroupRelatedDiscount", b =>
                {
                    b.Property<int>("ItemGroupRelatedDiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<int>("MainItemGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("RelatedItemGroupId")
                        .HasColumnType("int");

                    b.HasKey("ItemGroupRelatedDiscountId");

                    b.ToTable("TF_Itemsgroup_RelatedDiscounts");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfItemsgroupSize", b =>
                {
                    b.Property<int>("ItemGroupSizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("SizeCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SizeDesc")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("TrackingId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("ItemGroupSizeId");

                    b.HasIndex("ItemGroupId");

                    b.ToTable("TF_Itemsgroup_Sizes");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfItemsgroupSizeLink", b =>
                {
                    b.Property<int>("ItemgroupId")
                        .HasColumnType("int");

                    b.Property<string>("SimilarId")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("SizeDesc")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.HasKey("ItemgroupId");

                    b.ToTable("TF_Itemsgroup_SizeLink");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfMenuLink", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAdded");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("departmentId");

                    b.Property<string>("DestinationUrl")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("destinationUrl");

                    b.Property<string>("ShortTitle")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("LinkId");

                    b.ToTable("TF_MenuLinks");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfNewsletterSubscriber", b =>
                {
                    b.Property<int>("SubscriberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("subscriberId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("addedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("firstName");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ipaddress");

                    b.Property<int?>("IsActive")
                        .HasColumnType("int")
                        .HasColumnName("isActive");

                    b.Property<int?>("NewsletterType")
                        .HasColumnType("int");

                    b.Property<string>("ValidationCode")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("validationCode");

                    b.HasKey("SubscriberId");

                    b.ToTable("TF_Newsletter_Subscribers");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfOnlineInvoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlternativeGsm")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("AlternativeGSM");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasMaxLength(350)
                        .IsUnicode(false)
                        .HasColumnType("varchar(350)");

                    b.Property<string>("CustomerGsm")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("CustomerGSM");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAdded");

                    b.Property<string>("DownloadCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.Property<int?>("DownloadStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("InvoiceTypeId")
                        .HasColumnType("int")
                        .HasColumnName("invoiceTypeId");

                    b.Property<string>("Notes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("notes");

                    b.Property<string>("OrderIds")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("ShipAfterDate")
                        .HasColumnType("datetime")
                        .HasColumnName("shipAfterDate");

                    b.Property<string>("Source")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("source");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("TrackingIds")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("InvoiceId");

                    b.ToTable("TF_OnlineInvoices");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfOrderProduct", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("addedDate");

                    b.Property<string>("AffiliateId")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("affiliateId");

                    b.Property<int?>("AffiliateReferralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("affiliateReferralId")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("money")
                        .HasColumnName("discount");

                    b.Property<string>("DiscountCode")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("discountCode");

                    b.Property<DateTime?>("Expirydate")
                        .HasColumnType("datetime")
                        .HasColumnName("expirydate");

                    b.Property<decimal?>("HandlingCharges")
                        .HasColumnType("money");

                    b.Property<string>("Ipaddress")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IPAddress");

                    b.Property<int?>("LastUserId")
                        .HasColumnType("int")
                        .HasColumnName("lastUserId");

                    b.Property<int?>("NumOfDeliveries")
                        .HasColumnType("int");

                    b.Property<int>("NumOfItems")
                        .HasColumnType("int");

                    b.Property<decimal?>("OrderAmount")
                        .HasColumnType("money");

                    b.Property<int?>("ShipToId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ShippingCharges")
                        .HasColumnType("money");

                    b.Property<int?>("ShippingMode")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int")
                        .HasColumnName("sourceId");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int")
                        .HasColumnName("statusCode");

                    b.Property<int?>("SyncStatus")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("OrderId");

                    b.ToTable("TF_Order_Product");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfOrderProductLogger", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CheckoutDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cityId")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Codeconfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("codeconfirmed")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CurrentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CustomerGsm")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("customerGSM");

                    b.Property<string>("DeviceSource")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("DownloadSyncStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("downloadSyncStatus")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ExpressCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<bool?>("IsActivated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isActivated")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("OnlineNotes")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("onlineNotes");

                    b.Property<int?>("OrderType")
                        .HasColumnType("int");

                    b.Property<decimal?>("PaymentAmount")
                        .HasColumnType("money");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentIpaddress")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("PaymentIPAddress");

                    b.Property<int?>("PaymentMode")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiptViews")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("receiptViews")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("stateId")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("TellerId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TellerNumber")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("OrderId");

                    b.ToTable("TF_Order_Product_Logger");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfOrderReport", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ByUserId")
                        .HasColumnType("int")
                        .HasColumnName("byUserId");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<string>("ReportDetails")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("OrderId");

                    b.ToTable("TF_Order_Report");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfOrderVisaUrl", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("transactionId");

                    b.Property<string>("TellerId")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("tellerId");

                    b.Property<string>("TellerNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tellerNumber");

                    b.Property<string>("Url")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("url");

                    b.Property<string>("Xml")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("xml");

                    b.HasKey("OrderId", "TransactionId");

                    b.ToTable("TF_Order_VisaUrl");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfParameter", b =>
                {
                    b.Property<int>("ParamId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("addedDate");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("departmentId");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<string>("ParamName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("ParamTypeId")
                        .HasColumnType("int")
                        .HasColumnName("paramTypeId");

                    b.HasKey("ParamId");

                    b.ToTable("TF_Parameters");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfParameterItem", b =>
                {
                    b.Property<int>("ParamId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ParamId", "ProductId")
                        .HasName("PK_TF_ProductParameters");

                    b.ToTable("TF_ParameterItems");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfParameterType", b =>
                {
                    b.Property<int>("ParamTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("addedDate");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("departmentId");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IPaddress");

                    b.Property<string>("ParamTypeName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("ParamTypeId");

                    b.ToTable("TF_ParameterTypes");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfProductAttributesList", b =>
                {
                    b.Property<int>("AttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttrDesc")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<int?>("ByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAdded");

                    b.HasKey("AttributeId");

                    b.ToTable("TF_ProductAttributes_List");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfProductOrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Expirydate")
                        .HasColumnType("datetime")
                        .HasColumnName("expirydate");

                    b.Property<int?>("FlagId")
                        .HasColumnType("int")
                        .HasColumnName("flagId");

                    b.Property<int?>("FreeCollectionId")
                        .HasColumnType("int")
                        .HasColumnName("freeCollectionId");

                    b.Property<int?>("ItemGroupSizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("OfferPrice")
                        .HasColumnType("money");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductTitle")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("ProductType")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RefId")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int")
                        .HasColumnName("saleId");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("transactionId");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("OrderItemId");

                    b.ToTable("TF_ProductOrderItems");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfRelatedCollection", b =>
                {
                    b.Property<int>("CollectionId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedCollectionId")
                        .HasColumnType("int")
                        .HasColumnName("relatedCollectionId");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAdded");

                    b.Property<int?>("Strength")
                        .HasColumnType("int");

                    b.HasKey("CollectionId", "RelatedCollectionId");

                    b.ToTable("TF_RelatedCollections");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfRelatedDepartment", b =>
                {
                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedDepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("relatedDepartmentId");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAdded");

                    b.Property<int?>("Strength")
                        .HasColumnType("int");

                    b.HasKey("DepartmentId", "RelatedDepartmentId");

                    b.ToTable("TF_RelatedDepartments");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfRelatedProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<int?>("Strength")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "RelatedProductId");

                    b.ToTable("TF_RelatedProducts");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfSaleEvent", b =>
                {
                    b.Property<int>("SaleEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SaleEventDesc")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SaleEventName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SaleEventId");

                    b.ToTable("TF_SaleEvents");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfSaleEventItem", b =>
                {
                    b.Property<int>("SaleEventId")
                        .HasColumnType("int");

                    b.Property<int>("ItemGroupId")
                        .HasColumnType("int");

                    b.Property<decimal?>("OfferPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Position")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("position")
                        .HasDefaultValueSql("((100))");

                    b.HasKey("SaleEventId", "ItemGroupId");

                    b.ToTable("TF_SaleEvent_Items");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfSalesLog", b =>
                {
                    b.Property<int>("SalesLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("CashBackProcessed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("cashBackProcessed")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CashBackValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CollectionName")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("collectionName");

                    b.Property<int?>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAdded");

                    b.Property<int?>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("departmentId")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Gsm")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("GSM");

                    b.Property<int?>("Itemgroupid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("itemgroupid")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime")
                        .HasColumnName("purchaseDate");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("money");

                    b.Property<int?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("ReceiptItemId")
                        .HasColumnType("int");

                    b.Property<string>("SoldBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("title");

                    b.Property<string>("TrackingId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("SalesLogId");

                    b.ToTable("TF_SalesLog");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfSalesReceiptLog", b =>
                {
                    b.Property<int>("ReceiptId")
                        .HasColumnType("int")
                        .HasColumnName("receiptId");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAdded");

                    b.Property<decimal?>("DeliveryCharges")
                        .HasColumnType("money")
                        .HasColumnName("deliveryCharges");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("money")
                        .HasColumnName("discount");

                    b.Property<string>("DiscountCode")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("discountCode");

                    b.Property<decimal?>("HandlingCharges")
                        .HasColumnType("money")
                        .HasColumnName("handlingCharges");

                    b.Property<int?>("ReceiptStatus")
                        .HasColumnType("int");

                    b.Property<decimal?>("ReceiptTotal")
                        .HasColumnType("money");

                    b.HasKey("ReceiptId");

                    b.ToTable("TF_SalesReceipt_Log");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfShipToAddress", b =>
                {
                    b.Property<int>("ShipToId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AlternativeGsm")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("AlternativeGSM");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Country")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAdded");

                    b.Property<string>("DaytimePhone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("DeliverTo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("Hearaboutus")
                        .HasColumnType("int")
                        .HasColumnName("hearaboutus");

                    b.Property<string>("NearestBusStop")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("NearestLandMark")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("OfficeResidential")
                        .HasColumnType("int");

                    b.Property<string>("OrderGsm")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("OrderGSM");

                    b.Property<string>("OrderName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PreferredDeliveryTime")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ShipToId");

                    b.ToTable("TF_ShipToAddress");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfShipToNewAddress", b =>
                {
                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("addressId");

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AlternativePhone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("alternativePhone");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Country")
                        .HasColumnType("int");

                    b.Property<string>("DaytimePhone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("DeliverTo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("NearestBusStop")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("NearestLandMark")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("OfficeResidential")
                        .HasColumnType("int");

                    b.Property<string>("PreferredDeliveryTime")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.ToTable("TF_ShipToNewAddress");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfSideImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAdded");

                    b.Property<string>("DestinationUrl")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ImageTitle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("imageUrl");

                    b.Property<int?>("PageId")
                        .HasColumnType("int");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ImageId");

                    b.ToTable("TF_SideImages");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfStatesCity", b =>
                {
                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)");

                    b.Property<bool?>("Codavailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("CODAvailable")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("DeliveryCharges")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("TF_States_Cities");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfStatesDeliveryCharge", b =>
                {
                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<decimal>("DeliveryCharges")
                        .HasColumnType("money");

                    b.Property<string>("StateDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StateId");

                    b.ToTable("TF_States_DeliveryCharges");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfSubscriber", b =>
                {
                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("addedDate");

                    b.Property<int?>("Area")
                        .HasColumnType("int");

                    b.Property<int?>("Country")
                        .HasColumnType("int");

                    b.Property<decimal?>("CreditBalance")
                        .HasColumnType("money")
                        .HasColumnName("creditBalance");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime")
                        .HasColumnName("DOB");

                    b.Property<int?>("Education")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmailCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("emailCode");

                    b.Property<string>("EmailVerified")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("emailVerified")
                        .IsFixedLength(true);

                    b.Property<string>("Gsm")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("GSM");

                    b.Property<bool?>("HasPaidSubscription")
                        .HasColumnType("bit")
                        .HasColumnName("hasPaidSubscription");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IPAddress");

                    b.Property<DateTime?>("LastPasswordRequestDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Location")
                        .HasColumnType("int");

                    b.Property<int?>("PhoneDeviceId")
                        .HasColumnType("int");

                    b.Property<int?>("Profession")
                        .HasColumnType("int");

                    b.Property<int?>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("Subscriber")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("subscriber");

                    b.Property<int>("SubscriberId")
                        .HasColumnType("int");

                    b.ToTable("TF_Subscribers");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfSubscribersPreset", b =>
                {
                    b.Property<string>("Gsm")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("GSM");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("addedDate");

                    b.Property<int>("Area")
                        .HasColumnType("int")
                        .HasColumnName("area");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<string>("Ipaddress")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("IsVerified")
                        .HasColumnType("bit")
                        .HasColumnName("isVerified");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<string>("MobileCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("mobileCode");

                    b.Property<int?>("NumSent")
                        .HasColumnType("int")
                        .HasColumnName("numSent");

                    b.Property<string>("OnlineCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("onlineCode");

                    b.HasKey("Gsm");

                    b.ToTable("TF_Subscribers_Preset");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfTheme", b =>
                {
                    b.Property<int>("ThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ThemeDesc")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("ThemeGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ThemeName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ThemeId");

                    b.ToTable("TF_Themes");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfThemeGroup", b =>
                {
                    b.Property<int>("ThemeGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<string>("ThemeGroupName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("ThemeGroupId");

                    b.ToTable("TF_ThemeGroups");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfThemeItem", b =>
                {
                    b.Property<int>("ThemeId")
                        .HasColumnType("int");

                    b.Property<int>("ItemGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("Position")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("position")
                        .HasDefaultValueSql("((100))");

                    b.HasKey("ThemeId", "ItemGroupId");

                    b.ToTable("TF_Theme_Items");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfUnregisteredPublisher", b =>
                {
                    b.Property<int>("PubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Category")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("imageUrl");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<bool?>("IsFeatured")
                        .HasColumnType("bit")
                        .HasColumnName("isFeatured");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Profile")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("profile");

                    b.HasKey("PubId");

                    b.ToTable("TF_UnregisteredPublisher");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfUserKeyword", b =>
                {
                    b.Property<string>("Gsm")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("GSM");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("addedDate");

                    b.Property<string>("Keyword")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.HasKey("Gsm");

                    b.ToTable("TF_User_Keyword");
                });

            modelBuilder.Entity("Kubona.Data.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gsm")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("GSM");

                    b.Property<int?>("Location")
                        .HasColumnType("int");

                    b.Property<int?>("Sex")
                        .HasColumnType("int")
                        .HasColumnName("sex");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("userName");

                    b.HasKey("Id");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("Kubona.Data.Models.WebpagesMembership", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ConfirmationToken")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastPasswordFailureDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("PasswordChangedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PasswordFailuresSinceLastSuccess")
                        .HasColumnType("int");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PasswordVerificationToken")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("PasswordVerificationTokenExpirationDate")
                        .HasColumnType("datetime");

                    b.HasKey("UserId")
                        .HasName("PK__webpages__1788CC4C6383C8BA");

                    b.ToTable("webpages_Membership");
                });

            modelBuilder.Entity("Kubona.Data.Models.WebpagesOauthMembership", b =>
                {
                    b.Property<string>("Provider")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ProviderUserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Provider", "ProviderUserId")
                        .HasName("PK__webpages__F53FC0ED6754599E");

                    b.ToTable("webpages_OAuthMembership");
                });

            modelBuilder.Entity("Kubona.Data.Models.WebpagesRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("RoleId")
                        .HasName("PK__webpages__8AFACE1A6B24EA82");

                    b.ToTable("webpages_Roles");
                });

            modelBuilder.Entity("Kubona.Data.Models.WebpagesUsersInRole", b =>
                {
                    b.Property<int>("RoleUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RoleUserId");

                    b.ToTable("webpages_UsersInRoles");
                });

            modelBuilder.Entity("Kubona.Data.Models.WindowsServicesErrorTest", b =>
                {
                    b.Property<int>("ErrorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAdded");

                    b.Property<string>("Msg")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("ErrorId");

                    b.ToTable("_WindowsServices_Error_Test");
                });

            modelBuilder.Entity("Kubona.Data.Models.BgPhotoBlogItem", b =>
                {
                    b.HasOne("Kubona.Data.Models.BgPhotoBlog", "PhotoBlog")
                        .WithMany("BgPhotoBlogItems")
                        .HasForeignKey("PhotoBlogId")
                        .HasConstraintName("FK_BG_PhotoBlog_Items_BG_PhotoBlog")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("PhotoBlog");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfItemsGroup", b =>
                {
                    b.HasOne("Kubona.Data.Models.BwBrand", "BwBrand")
                        .WithMany("TfItemsGroups")
                        .HasForeignKey("BrandId");

                    b.HasOne("Kubona.Data.Models.BwColor", "BwColor")
                        .WithMany("TfItemsGroups")
                        .HasForeignKey("ColorId");

                    b.HasOne("Kubona.Data.Models.TfDepartment", "TfDepartment")
                        .WithMany("TfItemsGroups")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("BwBrand");

                    b.Navigation("BwColor");

                    b.Navigation("TfDepartment");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfItemsgroupSize", b =>
                {
                    b.HasOne("Kubona.Data.Models.TfItemsGroup", "ItemGroup")
                        .WithMany("TfItemsgroupSizes")
                        .HasForeignKey("ItemGroupId")
                        .HasConstraintName("FK_TF_Itemsgroup_Sizes_TF_ItemsGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemGroup");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfStatesCity", b =>
                {
                    b.HasOne("Kubona.Data.Models.TfStatesDeliveryCharge", "State")
                        .WithMany("TfStatesCities")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_TF_States_Cities_TF_States_DeliveryCharges")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("State");
                });

            modelBuilder.Entity("Kubona.Data.Models.BgPhotoBlog", b =>
                {
                    b.Navigation("BgPhotoBlogItems");
                });

            modelBuilder.Entity("Kubona.Data.Models.BwBrand", b =>
                {
                    b.Navigation("TfItemsGroups");
                });

            modelBuilder.Entity("Kubona.Data.Models.BwColor", b =>
                {
                    b.Navigation("TfItemsGroups");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfDepartment", b =>
                {
                    b.Navigation("TfItemsGroups");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfItemsGroup", b =>
                {
                    b.Navigation("TfItemsgroupSizes");
                });

            modelBuilder.Entity("Kubona.Data.Models.TfStatesDeliveryCharge", b =>
                {
                    b.Navigation("TfStatesCities");
                });
#pragma warning restore 612, 618
        }
    }
}
